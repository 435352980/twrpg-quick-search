interface Local {
  common: {
    panel: string;
    bag: string;
    store: string;
    selectLanguage: string;
    loading: string;
    split: string;
    upgrade: string;
    notFound: string;
    ok: string;
    cancel: string;
    copy: string;
    copyImageSuccess: string;
    calcInfo: string;
    sum: string;
    save: string;
    reset: string;
    optional: string;
    multiWays: string;
    chooseFeature: string;
    addedToTarget: string;
    addedToCache: string;
    unit: string;
    qualities: [string, string, string, string, string, string, string, string, string];
    goodFields: {
      hp: string;
      mp: string;
      atk: string;
      def: string;
      str: string;
      agi: string;
      int: string;
      mainAttrInc: string;
      atkSpeed: string;
      moveSpeed: string;
      abilityDamageInc: string;
      sufferDamageDec: string;
      magicDefInc: string;
      hpInc: string;
      stillDamageInc: string;
      atkDamageInc: string;
      mpInc: string;
      hpRegenInc: string;
      sufferCureInc: string;
      missInc: string;
      punchAsChanceInc: string;
      punchChanceInc: string;
      resurrectionTimeDec: string;
      expInc: string;
      iceDamageInc: string;
      fireDamageInc: string;
      windAttrInc: string;
      natureAttrInc: string;
    };
    stage: string;
    stages: [string, string, string, string, string, string, string];
    otherType: string;
    all: string;
    categories: {
      Equip: string;
      Weapon: string;
      Helm: string;
      Armor: string;
      Ring: string;
      Wings: string;
      Material: string;
      Icon: string;
      Token: string;
      Summoner: string;
      Quest: string;
    };
    unitProps: {
      uhpr: string;
      uhpm: string;
      uabi: string;
      utub: string;
      utip: string;
      udty: string;
      umvs: string;
      ucol: string;
      unam: string;
      usca: string;
      ubld: string;
      urtm: string;
      ugor: string;
      ulur: string;
      usid: string;
      util: string;
      umvt: string;
      utyp: string;
      usin: string;
      umvh: string;
      umdl: string;
      upgr: string;
      usnd: string;
      uico: string;
      ushw: string;
      ushh: string;
      ushx: string;
      ushy: string;
      ussc: string;
      uclb: string;
      uclg: string;
      uclr: string;
      uhab: string;
      uint: string;
      ubba: string;
      ubsi: string;
      ubdi: string;
      ustp: string;
      uinp: string;
      uagp: string;
      uagi: string;
      ustr: string;
      uaen: string;
      urq2: string;
      urq1: string;
      urqc: string;
      uawt: string;
      utpr: string;
      upru: string;
      uhot: string;
      upro: string;
      ussi: string;
      ureq: string;
      usei: string;
      ucam: string;
      ides: string;
      ulfo: string;
      ulfi: string;
      umsl: string;
      ulev: string;
      uspa: string;
      ufoo: string;
      ucpt: string;
      ucbs: string;
      udea: string;
      ushu: string;
      ua1t: string;
      ua1b: string;
      ua1c: string;
      udp1: string;
      ubs1: string;
      ua1s: string;
      ucs1: string;
      ua1w: string;
      ua1m: string;
      umh1: string;
      ua1r: string;
      ua1g: string;
      ulpz: string;
      uacq: string;
      urb1: string;
      ua1z: string;
      urac: string;
      uma1: string;
      ua1p: string;
      ua1q: string;
      ua1f: string;
      ua1h: string;
      uhrt: string;
      uhd1: string;
      uqd1: string;
      upri: string;
      ufle: string;
      uimz: string;
      uaap: string;
      udtm: string;
      uarm: string;
      urun: string;
      uwal: string;
      ubui: string;
      ua1d: string;
      ufor: string;
      utar: string;
      udef: string;
      umvf: string;
      uslz: string;
      usma: string;
      umpr: string;
      ugol: string;
      umpm: string;
      ulpx: string;
      ulpy: string;
      uamn: string;
      uerd: string;
      ucut: string;
      ucun: string;
      udaa: string;
      umpi: string;
      ucua: string;
      uver: string;
      utcc: string;
      umxp: string;
      umxr: string;
      utco: string;
      udep: string;
      upra: string;
      umvr: string;
      umis: string;
      uspe: string;
      uani: string;
      ulum: string;
      usrg: string;
      usst: string;
      uscb: string;
      uhos: string;
      usle: string;
      uhhd: string;
      udro: string;
      upoi: string;
      ucar: string;
      uhom: string;
      ushr: string;
      uble: string;
      uprw: string;
      uwu1: string;
      ushb: string;
      uubs: string;
      upat: string;
      umas: string;
      udup: string;
    };
  };
  views: {
    header: {
      appName: string;
      items: string;
      heroes: string;
      bosses: string;
      repChats: string;
      activities: string;
      setWar3Path: string;
      openWar3Path: string;
      setExportPath: string;
      openExportPath: string;
      resetPath: string;
      resetDialog: {
        title: string;
        message: {
          war3: string;
          export: string;
        };
      };
      team: {
        add: string;
        name: string;
        select: string;
        notice: string;
        view: string;
      };
      save: {
        select: string;
        notice: string;
        view: string;
      };
      listenOn: string;
      listenOff: string;
      scale: string;
      about: string;
      releaseUrl: string;
      h5: string;
      qq: string;
      ps: string;
    };
    good: {
      operations: string;
      image: string;
      heroLimit: string;
      level: string;
      quality: string;
      limit: string;
      exclusives: string;
      overView: string;
      calc: string;
      have: string;
      searchPlaceholder: string;
      dropFrom: string;
      buildFrom: string;
      makeTo: string;
      unitAttr: string;
      bossDrop: string;
    };
    calc: {
      saveName: string;
      num: string;
      count: string;
      requireCount: string;
      requireChooseCount: string;
      necessaryItem: string;
      unNecessaryItem: string;
      chooseItem: string;
      alreadyHave: string;
    };
    mdx: {
      selectAnimation: string;
      selectWing: string;
      selectHelmet: string;
      selectRing: string;
    };
    targetPanel: {
      clearCache: string;
      deleteTarget: string;
      getDeleteTargetNotice: (name: string) => string;
      searchPlaceholder: string;
      toggle: string;
      addTarget: string;
      targetName: string;
    };
    team: {
      image: string;
      name: string;
      count: string;
      member: string;
      analysisTitle: string;
      add: string;
      chooseHero: string;
      mamberName: string;
      split: string;
      allMembersRequireAnalysis: string;
      deleteTeam: string;
      deleteTeamDialog: {
        title: string;
        getDeleteTeamNotice: (name: string) => string;
      };
      deleteMemberDialog: {
        title: 'Delete';
        getDeleteMemberNotice: (team: string, member: string) => string;
      };
      getAddedNotice: {
        panel: (name: string) => string;
        bag: (name: string) => string;
        target: (name: string) => string;
      };
      getSplitTitle: (name: string) => string;
      searchPlaceholder: string;
      save: string;
      cache: string;
      panel: string;
      target: string;
      bag: string;
      delete: string;
      createDate: string;
    };
    activity: {
      newYear: string;
      april: string;
      summer: string;
      halloween: string;
      no: string;
      image: string;
      name: string;
      skin: string;
      lossWarning: string;
    };
    hero: {
      image: string;
      name: string;
      skill: string;
      exclusive: string;
    };
    record: {
      refresh: string;
      deleteHistories: string;
      deleteHistoriesDialog: {
        title: string;
        content: string;
      };
      deleteSaveFile: string;
      deleteSaveFileDialog: {
        getTitle: (name: string) => string;
        content: string;
      };
      codes: string;
      items: string;
      time: string;
      operations: string;
      copy: string;
      getCopySuccessText: (no: number, chunkNum: number) => string;
      delete: string;
    };
    replay: {
      title: string;
      copyToClipboard: string;
      copySuccess: string;
    };
    unit: {
      image: string;
      name: string;
      drops: string;
      stage: string;
    };
    footer: {
      thanks: string;
      split: string;
      analysis: string;
      calc: string;
      targetSplit: string;
      getCopySuccessText: (name: string, chunkNum: number) => string;
      copy: string;
    };
  };
}
